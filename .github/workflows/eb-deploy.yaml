name: Deploy to AWS Elastic Beanstalk

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21' # Adjust to your Java version

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v3
    - name: Build with Gradle
      run: ./gradlew clean build

    - name: Install Elastic Beanstalk CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        pip3 install --upgrade pip
        pip3 install awsebcli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-west-2

    - name: Build the JAR file
      run: |
        JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
        FILENAME=$(basename "$JAR_FILE")
        echo "Found JAR file: $JAR_FILE"
        echo "Extracted filename: $FILENAME"
        mkdir -p .elasticbeanstalk/staging
        cp "$JAR_FILE" .elasticbeanstalk/staging/"$FILENAME".jar
        cp Procfile .elasticbeanstalk/staging/Procfile

    # - name: Prepare Deployment Package
    #   run: |
    #     # Create the deployment bundle with the JAR file
    #     cd deployment
    #     zip -r ../application.zip .
    #     cd ..
    #     ls -lah application.zip
    #     echo "Deployment package ready."

    - name: Deploy to AWS Elastic Beanstalk
      env:
        ENV_NAME: "spring-boot-app-1"     # Replace with your Elastic Beanstalk environment name
        EB_APP_NAME: "spring-boot-app"          # Replace with your Elastic Beanstalk application name
        REGION: "us-west-2"                     # Replace with your AWS region
        TIMEOUT: 15                             # Timeout for environment creation
      run: |
        eb init -p corretto-21 $EB_APP_NAME --region $REGION
    
        # If environment doesn't exist, create it
        if eb status $ENV_NAME > /dev/null 2>&1; then
          echo "Environment '$ENV_NAME' already exists."
        else
          eb create $ENV_NAME --timeout $TIMEOUT
        fi
        
        eb setenv SERVER_PORT=5000

        # Deploy the zipped application package
        eb deploy --staged --label "build-$(date +%s)"